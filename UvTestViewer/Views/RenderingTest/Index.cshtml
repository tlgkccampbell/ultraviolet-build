@model UvTestViewer.Models.RenderingTestOverview
@using UvTestViewer.Models

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Ultraviolet Rendering Tests</title>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Styles/Main.css")" />
</head>
<body>
    <div class="testrun-header">
        <h1>Ultraviolet Rendering Tests</h1>
        @if (Model.TestRunID == 0) {
            <h2>No tests have been run on @Model.VendorDisplayName hardware for @(Model.SelectedBranchKey ?? Model.SelectedPlanKey).</h2>
        } else {
            <h2>Test run #@Model.TestRunID for @(Model.SelectedBranchKey ?? Model.SelectedPlanKey) processed at @Model.TimeProcessed</h2>            
        }
    </div>
    <div class="testrun-subheader">
        <a href="@Url.Action("Index", new { vendor = GpuVendor.Intel, planKey = Model.SelectedPlanKey, branchKey = Model.SelectedBranchKey, page = Model.SelectedPage })" 
           class="vendorlink Intel @(Model.Vendor == GpuVendor.Intel ? "selected" : "")">
            <span>Intel HD Graphics</span>
        </a><a href="@Url.Action("Index", new { vendor = GpuVendor.Nvidia, planKey = Model.SelectedPlanKey, branchKey = Model.SelectedBranchKey, page = Model.SelectedPage })" 
               class="vendorlink Nvidia @(Model.Vendor == GpuVendor.Nvidia ? "selected" : "") ">
            <span>NVIDIA</span>
        </a><a href="@Url.Action("Index", new { vendor = GpuVendor.Amd, planKey = Model.SelectedPlanKey, branchKey = Model.SelectedBranchKey, page = Model.SelectedPage })" 
               class="vendorlink Amd @(Model.Vendor == GpuVendor.Amd ? "selected" : "") ">
            <span>AMD</span>
        </a>
    </div>
    <div class="testrun-sidebar-background"></div>
    <div class="testrun-sidebar">
        <ul>
            @foreach (var bambooPlan in Model.BambooPlans)
            {
                <li>
                    <h1>@bambooPlan.Name</h1>
                    <ul>
                        @foreach (var bambooBranch in bambooPlan.Branches)
                        {
                            var selected = String.Equals(bambooBranch.PlanKey, Model.SelectedPlanKey) && String.Equals(bambooBranch.BranchKey, Model.SelectedBranchKey);
                            var linkcss = selected ? "active" : "inactive";
                            <li><a class="@linkcss" href="@Url.Action("Index", new { vendor = Model.Vendor, planKey = bambooBranch.PlanKey, branchKey = bambooBranch.BranchKey })">@bambooBranch.Name</a></li>
                        }
                    </ul>
                </li>
            }
        </ul>
    </div>
    <div class="testrun-view">
        <div>
            @if (Model.TestRunID == 0)
            {
                <h3 class="testcount none">No tests run</h3>
            }
            else if (Model.FailedTestCount > 0)
            {
                <h3 class="testcount failed">@Model.FailedTestCount failed</h3>
            }
            else
            {
                <h3 class="testcount passed">All tests passed</h3>
            }
        </div>
        @if (Model.TestRunID != 0)
        {
            <div class="testrun-container">
                <div class="testrun-menu">
                    <table>
                        <tr>
                            @for (var pageIndex = 0; pageIndex < Model.Pages.Count; pageIndex++)
                            {
                                var selected = (Model.SelectedPage == pageIndex);
                                var page = Model.Pages[pageIndex];
                                var pagecss = String.Format("{0} {1}", page.Failed ? "failed" : "passed", selected ? "selected" : "inactive");
                                <td><a class="@pagecss" href="@Url.Action("Index", new { vendor = Model.Vendor, planKey = Model.SelectedPlanKey, branchKey = Model.SelectedBranchKey, page = pageIndex })">@(pageIndex + 1)</a></td>
                            }
                        </tr>
                    </table>
                </div>
                <div class="testrun">
                    @foreach (var test in Model.Tests.OrderBy(x => x.Name))
                    {
                        <div class="test @(test.Failed ? "failed" : "passed")">
                            <table>
                                <thead>
                                    <tr>
                                        <td colspan="3">
                                            <p class="testname">@String.Format("{0}{1}", test.Name, test.Failed ? " (FAILED)" : String.Empty)</p>
                                            <p class="testdesc">@test.Description</p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Expected</td>
                                        <td>Actual</td>
                                        <td>Diff</td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td><img class="expected" src="@test.Expected" /></td>
                                        <td><img class="actual" src="@test.Actual" /></td>
                                        <td><img class="diff" src="@test.Diff" /></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }
        <div class="testrun-footer">
            <p>UvTestRunner is part of the <a href="http://uv.twistedlogik.net">Ultraviolet Framework</a>.</p>
        </div>
    </div>
</body>
</html>
